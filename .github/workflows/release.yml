name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version consistency
        shell: bash
        run: |
          TAG_NAME="${{ steps.version.outputs.version }}"
          # Strip leading 'v' from tag (e.g., v1.2.3 -> 1.2.3)
          TAG_VERSION="${TAG_NAME#v}"
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "🏷️  Tag version: $TAG_VERSION"
          echo "📦 Cargo version: $CARGO_VERSION"
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "❌ ERROR: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            echo "This indicates the tag was created before the version was bumped in Cargo.toml"
            echo "Please use 'versioneer' to manage versions and create tags atomically"
            exit 1
          fi
          echo "✅ Version consistency validated"

      - name: Create Release
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "Multi Agent Config ${{ steps.version.outputs.version_number }}" \
            --generate-notes \
            --draft \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify version consistency
        shell: bash
        run: |
          TAG_VERSION="${{ needs.create-release.outputs.version }}"
          # Strip leading 'v' from tag (e.g., v1.2.3 -> 1.2.3)
          EXPECTED_VERSION="${TAG_VERSION#v}"
          # Verify the Cargo.toml version matches the tag
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "🏷️  Tag version: $EXPECTED_VERSION"
          echo "📦 Cargo.toml version: $CARGO_VERSION"
          if [ "$EXPECTED_VERSION" != "$CARGO_VERSION" ]; then
            echo "❌ ERROR: Tag version ($EXPECTED_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            echo "This indicates a version synchronization problem"
            exit 1
          fi
          echo "✅ Version consistency verified for ${{ matrix.target }}"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.86.0
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Build and upload release binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          # Binary name (matches the name in Cargo.toml)
          bin: multi-agent-config
          # Target platform (one per matrix job)
          target: ${{ matrix.target }}
          # Include additional files in the release archive
          include: LICENSE,README.md
          # Use tar.gz for Unix, zip for Windows
          tar: unix
          zip: windows
          # Generate SHA256 checksums
          checksum: sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        run: |
          gh release edit ${{ needs.create-release.outputs.version }} \
            --draft=false \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}